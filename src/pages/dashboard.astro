---
// src/pages/dashboard.astro
---
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
  <title>ダッシュボード | OKIPOKA</title>

  <style is:global>
:root{
  /* Brand & surfaces */
  --pri:#ff7f00; --pri2:#e66f00;
  --bg:#f5f7fb;                /* 外側の濃い背景 */
  --surface:#ffffff;           /* カード */
  --border:#e5e7eb;            /* 枠線 */
  --ink:#111827;               /* 本文 */
  --muted:#64748b;             /* 補助テキスト */
  --danger:#ef4444; --danger2:#dc2626;
  --radius:16px;               /* 角丸は大きめ */
  --shadow:0 6px 16px rgba(17,24,39,.08);
  --shadow-sm:0 4px 10px rgba(17,24,39,.06);
}

*{ box-sizing:border-box; }

/* ===== モバイル最適化（デフォルトをスマホ基準に） ===== */
html,body{ height:100%; }
body{
  margin:0; background:var(--bg); color:var(--ink);
  font-family: -apple-system,BlinkMacSystemFont,'Segoe UI',Roboto,'Noto Sans JP',Helvetica,Arial,sans-serif;
  line-height:1.6;
  font-size:16px;
}

main{ max-width:640px; margin:0 auto; padding:24px 16px 64px; }

/* 上部のログイン表示カード */
#user-info{
  background:var(--surface); border:1.5px solid var(--border);
  border-radius:var(--radius); box-shadow:var(--shadow-sm);
  margin:16px auto 20px; padding:14px 16px;
  display:flex; gap:12px; align-items:center; justify-content:space-between; flex-wrap:wrap;
  max-width:640px;
}
#user-info p{
  margin:0; font-weight:700; font-size:16px;
  display:flex; align-items:center; gap:8px; flex-wrap:wrap;  /* バッジとテキストの整列 */
}
#master-badge{
  background:#ff6b6b;
  color:#fff !important;          /* 旧インラインのcolorを上書き */
  padding:6px 10px;
  border-radius:999px;
  font-size:13px;
  font-weight:800;
  line-height:1;                  /* クリップ防止 */
  display:inline-flex;            /* 高さが途切れないように */
  align-items:center;
  white-space:nowrap;             /* 改行で欠けない */
}

/* セクションカード */
.dashboard-section{
  background:var(--surface); border:1.5px solid var(--border);
  border-radius:var(--radius); box-shadow:var(--shadow);
  margin:16px auto; padding:18px 16px;
  max-width:640px;
}

h1,h2{ margin:0 0 16px; font-weight:900; text-align:center; }
h1{ font-size:22px; }
h2{ font-size:20px; color:#0f172a; }

/* ラベル & ヘルプ */
label{ display:block; color:var(--muted); font-weight:700; font-size:16px; margin:14px 0 8px; }

/* ===== 入力UI（大きく・押しやすく） ===== */
select,input,textarea{
  width:100%; appearance:none; -webkit-appearance:none; outline:0;
  border:2px solid var(--border); background:#fff; color:var(--ink);
  border-radius:16px; padding:18px 18px; font-size:18px; line-height:1.35;
  min-height:58px; /* bigger tap target */
  transition:border-color .15s, box-shadow .15s, transform .1s;
}
input[type="time"], input[type="date"]{ min-height:58px; }
textarea{ min-height:140px; }
select{
  background-image:url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3e%3cpath d='M6 8l4 4 4-4' stroke='%2364748b' stroke-width='1.8' fill='none' stroke-linecap='round' stroke-linejoin='round'/%3e%3c/svg%3e");
  background-repeat:no-repeat; background-position:right 14px center; background-size:20px 20px; padding-right:52px;
}
select:focus,input:focus,textarea:focus{
  border-color:var(--pri);
  box-shadow:0 0 0 4px color-mix(in srgb, var(--pri) 18%, transparent);
  transform:translateY(-1px);
}

/* 送信ボタン（type=submit は既存HTMLそのまま） */
button[type="submit"]{
  width:100%; max-width:520px; display:inline-flex; justify-content:center; align-items:center;
  gap:.6rem; padding:18px 20px; border-radius:14px; border:0; cursor:pointer;
  background:linear-gradient(135deg,var(--pri),var(--pri2)); color:#fff; font-weight:900; font-size:18px;
  margin-top:12px; box-shadow:var(--shadow-sm); transition:transform .1s, filter .15s;
}
button[type="submit"]:hover{ transform:translateY(-1px); }
button[type="submit"]:active{ transform:translateY(0); }

/* 汎用ボタン（ログアウト/削除） */
#logout-btn, .delete-btn{
  display:inline-flex; align-items:center; justify-content:center; gap:.5rem;
  padding:14px 16px; border-radius:12px; border:0; font-weight:900; cursor:pointer;
  box-shadow:var(--shadow-sm); font-size:16px;
}
#logout-btn{ background:#6b7280; color:#fff; }
#logout-btn:hover{ filter:brightness(1.05); }
.delete-btn{ background:var(--danger); color:#fff; min-width:92px; }
.delete-btn:hover{ background:var(--danger2); }

/* テーブル（一覧） */
.tournaments-container{ overflow-x:auto; -webkit-overflow-scrolling:touch; }
table{ width:100%; border-collapse:collapse; margin-top:12px; background:#fff; border-radius:14px; overflow:hidden; box-shadow:var(--shadow-sm); font-size:16px; }
th{ background:#f1f5f9; color:#111827; font-weight:800; text-align:left; padding:14px; font-size:13px; letter-spacing:.02em; }
td{ padding:14px; border-bottom:1px solid var(--border); }
tr:last-child td{ border-bottom:0; }
tbody tr:hover{ background:#fafbff; }

/* 空状態/ローディング */
.loading,.empty-state{ text-align:center; color:var(--muted); padding:22px; }
.empty-state{ border:2px dashed var(--border); border-radius:14px; background:#f8fafc; }

/* === 登録済みトーナメント：カード表示 === */
#tournament-list, #tournament-list-store{ display:block; }
.tournament-card{
  background:#fff; border:1.5px solid var(--border); border-radius:14px;
  box-shadow:var(--shadow-sm); padding:16px; margin-bottom:14px;
}
.tournament-header{ display:flex; justify-content:space-between; align-items:center; gap:12px; margin-bottom:6px; }
.tournament-header h3{ margin:0; font-size:17px; font-weight:800; color:#111827; line-height:1.3; }
.tournament-header .fee{ font-weight:900; font-size:16px; color:#111827; white-space:nowrap; }
.tournament-meta{ font-size:14px; color:var(--muted); line-height:1.5; display:grid; grid-template-columns: 1fr 1fr; gap:6px 12px; }
.tournament-meta div strong{ color:#111827; font-weight:800; margin-right:4px; }
.tournament-card .delete-btn{ margin-top:12px; width:100%; border:0; border-radius:10px; padding:10px 14px; font-weight:800; font-size:15px; background:var(--danger); color:#fff; }
.tournament-card .delete-btn:hover{ background:var(--danger2); }

/* ===== タブレット以上で少し引き締め ===== */
@media (min-width:768px){
  body{ font-size:16px; }
  main{ max-width:760px; padding:28px 0 64px; }
  .dashboard-section{ max-width:720px; margin:24px auto; padding:22px; }
  h1{ font-size:21px; }
  h2{ font-size:19px; }
  select,input,textarea{ font-size:16px; min-height:50px; }
  button[type="submit"]{ width:auto; min-width:200px; padding:14px 18px; }
}
  </style>
</head>
<body>
  <main>
    <div id="user-info">
      <p><span id="user-email"></span>でログイン中 <span id="master-badge" class="badge-master" style="display:none">[マスター]</span></p>
      <button id="logout-btn">ログアウト</button>
    </div>

    <div id="dashboard-container"><p style="text-align:center;">読み込み中...</p></div>
  </main>

  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
    import { getAuth, onAuthStateChanged, signOut } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-auth.js";
    import { getFirestore, collection, query, where, getDocs, doc, updateDoc, addDoc, serverTimestamp, deleteDoc, orderBy } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";

    const firebaseConfig = {
      apiKey: "AIzaSyB8q6HLBGi_DWmrvkGCaWK_B6EeP7D--wo",
      authDomain: "okipoka-v2.firebaseapp.com",
      projectId: "okipoka-v2",
      storageBucket: "okipoka-v2.firebasestorage.app",
      messagingSenderId: "6256473895",
      appId: "1:6256473895:web:df644eaac108a218d59b02",
      measurementId: "G-JLC2569WN3"
    };

    const app = initializeApp(firebaseConfig);
    const auth = getAuth(app);
    const db = getFirestore(app);
    const container = document.getElementById('dashboard-container');

    // Helper: get today's date as YYYY-MM-DD in local time
    function getTodayStr(){
      const d = new Date();
      const y = d.getFullYear();
      const m = String(d.getMonth()+1).padStart(2,'0');
      const day = String(d.getDate()).padStart(2,'0');
      return `${y}-${m}-${day}`;
    }
    
    onAuthStateChanged(auth, async (user) => {
      if (user) {
        document.getElementById('user-email').textContent = user.email;
        const roleDocSnap = await getDocs(query(collection(db, "roles"), where("__name__", "==", user.uid)));
        const isMaster = !roleDocSnap.empty && roleDocSnap.docs[0].data().isMaster === true;

        if (isMaster) {
            document.getElementById('master-badge').style.display = 'inline';
            renderMasterView();
        } else {
            renderStoreView(user);
        }
      } else {
        window.location.href = '/login';
      }
    });

    document.getElementById('logout-btn').addEventListener('click', () => signOut(auth));

    // ★★★ マスター専用 ★★★
    async function renderMasterView() {
      const storesSnapshot = await getDocs(collection(db, "stores"));
      const storeOptions = storesSnapshot.docs.map(d => `<option value="${d.id}">${d.data().name}</option>`).join('');

      container.innerHTML = `
        <section class="dashboard-section">
          <h2>基本情報</h2>
          <form id="master-tournament-form">
            <div class="simple-form">
              <div class="form-group">
                <label for="store-select">店舗：</label>
                <select id="store-select" required>${storeOptions}</select>
              </div>
              
              <div class="form-group">
                <label for="event-name">イベント名：</label>
                <input type="text" id="event-name" required />
              </div>
              
              <div class="form-group">
                <label for="start-date">開催日：</label>
                <input type="date" id="start-date" required />
              </div>
              
              <div class="form-group">
                <label for="start-time">開始時間：</label>
                <input type="time" id="start-time" required />
              </div>
              
              <div class="form-group">
                <label for="late-reg">レイトレジスト：</label>
                <input type="time" id="late-reg" />
              </div>
              
              <div class="form-group">
                <label for="event-type">イベント種類：</label>
                <select id="event-type">
                  <option value="">選択してください</option>
                  <option value="トーナメント">トーナメント</option>
                  <option value="サテライト">サテライト</option>
                  <option value="その他">その他</option>
                </select>
              </div>
            </div>

            <h2>参加情報</h2>
            <div class="simple-form">
              <div class="form-group">
                <label for="buy-in">参加費：</label>
                <input type="text" id="buy-in" required />
              </div>
              
              <div class="form-group">
                <label for="reentry-fee">リエントリー：</label>
                <input type="text" id="reentry-fee" />
              </div>
              
              <div class="form-group">
                <label for="addon">アドオン：</label>
                <input type="text" id="addon" />
              </div>
              
              <div class="form-group">
                <label for="stack">スタック：</label>
                <input type="text" id="stack" required />
              </div>
              
              <div class="form-group">
                <label for="prize">プライズ：</label>
                <textarea id="prize" rows="3"></textarea>
              </div>
            </div>

            <button type="submit">登録する</button>
          </form>
        </section>
        <section class="dashboard-section">
          <h2>登録済みトーナメント一覧</h2>
          <div class="tournaments-container">
            <div id="all-tournaments-list"></div>
          </div>
        </section>
      `;
      // Set default date to today for master form
      const startDateElMaster = document.getElementById('start-date');
      if (startDateElMaster && !startDateElMaster.value) {
        startDateElMaster.value = getTodayStr();
      }
      loadAllTournaments();

      document.getElementById('master-tournament-form').addEventListener('submit', async e => {
        e.preventDefault();
        const selectedStoreId = document.getElementById('store-select').value;
        const selectedStoreDoc = storesSnapshot.docs.find(d => d.id === selectedStoreId);
        
        const payload = {
          eventName: document.getElementById('event-name').value,
          startDate: document.getElementById('start-date').value,
          startTime: document.getElementById('start-time').value,
          lateReg: document.getElementById('late-reg').value,
          eventType: document.getElementById('event-type').value,
          buyIn: document.getElementById('buy-in').value,
          reentryFee: document.getElementById('reentry-fee').value,
          addon: document.getElementById('addon').value,
          stack: document.getElementById('stack').value,
          prize: document.getElementById('prize').value,
          storeId: selectedStoreId,
          storeName: selectedStoreDoc.data().name,
          ownerUid: selectedStoreDoc.data().ownerUid || null,
          createdAt: serverTimestamp()
        };
        await addDoc(collection(db, "tournaments"), payload);
        alert('登録しました！');
        e.target.reset();
        loadAllTournaments();
      });
    }

    async function loadAllTournaments() {
      const list = document.getElementById('all-tournaments-list');
      list.innerHTML = '<div class="loading">📡 読み込み中...</div>';
      const qAll = query(collection(db, "tournaments"), orderBy("createdAt", "desc"));
      const snapshot = await getDocs(qAll);
      if (snapshot.empty){
        list.innerHTML = '<div class="empty-state">📋 登録されたトーナメントはまだありません</div>';
        return;
      }
      list.innerHTML = snapshot.docs.map(d => {
        const t = d.data();
        const fee = t.buyIn ? `${t.buyIn}円` : '無料';
        const title = t.eventName || 'イベント';
        return `
          <div class="tournament-card">
            <div class="tournament-header">
              <h3>${title}</h3>
              <span class="fee">${fee}</span>
            </div>
            <div class="tournament-meta">
              <div><strong>店舗</strong>${t.storeName ?? ''}</div>
              <div><strong>日付</strong>${t.startDate ?? ''}</div>
            </div>
            <button class="delete-btn" data-id="${d.id}">🗑️ 削除</button>
          </div>`;
      }).join('');

      list.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
          if(confirm('⚠️ このトーナメントを削除しますか？\n削除すると復元できません。')){
            await deleteDoc(doc(db, "tournaments", btn.dataset.id));
            loadAllTournaments();
          }
        });
      });
    }

    // ★★★ 一般店舗専用 ★★★
    async function renderStoreView(user) {
        const qOwned = query(collection(db, "stores"), where("ownerUid", "==", user.uid));
        const ownedSnapshot = await getDocs(qOwned);
        if (!ownedSnapshot.empty) {
          const storeDoc = ownedSnapshot.docs[0];
          renderManagementView(storeDoc);
        } else {
          const qUnclaimed = query(collection(db, "stores"), where("ownerUid", "==", null));
          const unclaimedSnapshot = await getDocs(qUnclaimed);
          renderClaimView(unclaimedSnapshot.docs, user.uid);
        }
    }

    function renderManagementView(storeDoc) {
      const storeData = storeDoc.data();
      const userId = storeDoc.data().ownerUid;
      container.innerHTML = `
        <section class="dashboard-section">
          <h1>${storeData.name} ダッシュボード</h1>
          <form id="store-tournament-form">
            <h2>基本情報</h2>
            <div class="simple-form">
              <div class="form-group">
                <label for="event-name">イベント名：</label>
                <input type="text" id="event-name" required />
              </div>
              
              <div class="form-group">
                <label for="start-date">開催日：</label>
                <input type="date" id="start-date" required />
              </div>
              
              <div class="form-group">
                <label for="start-time">開始時間：</label>
                <input type="time" id="start-time" required />
              </div>
              
              <div class="form-group">
                <label for="late-reg">レイトレジスト：</label>
                <input type="time" id="late-reg" />
              </div>
              
              <div class="form-group">
                <label for="event-type">イベント種類：</label>
                <select id="event-type">
                  <option value="">選択してください</option>
                  <option value="トーナメント">トーナメント</option>
                  <option value="サテライト">サテライト</option>
                  <option value="その他">その他</option>
                </select>
              </div>
            </div>

            <h2>参加情報</h2>
            <div class="simple-form">
              <div class="form-group">
                <label for="buy-in">参加費：</label>
                <input type="text" id="buy-in" required />
              </div>
              
              <div class="form-group">
                <label for="reentry-fee">リエントリー：</label>
                <input type="text" id="reentry-fee" />
              </div>
              
              <div class="form-group">
                <label for="addon">アドオン：</label>
                <input type="text" id="addon" />
              </div>
              
              <div class="form-group">
                <label for="stack">スタック：</label>
                <input type="text" id="stack" required />
              </div>
              
              <div class="form-group">
                <label for="prize">プライズ：</label>
                <textarea id="prize" rows="3"></textarea>
              </div>
            </div>

            <button type="submit">登録する</button>
          </form>
        </section>
        <section class="dashboard-section">
          <h2>登録済みトーナメント</h2>
          <div class="tournaments-container">
            <div id="store-tournaments-list"></div>
          </div>
        </section>
      `;
      // Set default date to today for store form
      const startDateElStore = document.getElementById('start-date');
      if (startDateElStore && !startDateElStore.value) {
        startDateElStore.value = getTodayStr();
      }
      loadStoreTournaments(userId);

      document.getElementById('store-tournament-form').addEventListener('submit', async e => {
        e.preventDefault();
        const payload = {
          eventName: document.getElementById('event-name').value,
          startDate: document.getElementById('start-date').value,
          startTime: document.getElementById('start-time').value,
          lateReg: document.getElementById('late-reg').value,
          eventType: document.getElementById('event-type').value,
          buyIn: document.getElementById('buy-in').value,
          reentryFee: document.getElementById('reentry-fee').value,
          addon: document.getElementById('addon').value,
          stack: document.getElementById('stack').value,
          prize: document.getElementById('prize').value,
          storeId: storeDoc.id,
          storeName: storeData.name,
          ownerUid: userId,
          createdAt: serverTimestamp()
        };
        await addDoc(collection(db, "tournaments"), payload);
        alert('登録しました！');
        e.target.reset();
        loadStoreTournaments(userId);
      });
    }

    async function loadStoreTournaments(userId) {
      const list = document.getElementById('store-tournaments-list');
      list.innerHTML = '<div class="loading">📡 読み込み中...</div>';
      const qOwned = query(
        collection(db, "tournaments"),
        where("ownerUid", "==", userId),
        orderBy("createdAt", "desc")
      );
      const snapshot = await getDocs(qOwned);
      if (snapshot.empty){
        list.innerHTML = '<div class="empty-state">📋 まだトーナメントを登録していません</div>';
        return;
      }
      list.innerHTML = snapshot.docs.map(d => {
        const t = d.data();
        const fee = t.buyIn ? `${t.buyIn}円` : '無料';
        const title = t.eventName || 'イベント';
        return `
          <div class="tournament-card">
            <div class="tournament-header">
              <h3>${title}</h3>
              <span class="fee">${fee}</span>
            </div>
            <div class="tournament-meta">
              <div><strong>日付</strong>${t.startDate ?? ''}</div>
              <div><strong>開始</strong>${t.startTime ?? ''}</div>
            </div>
            <button class="delete-btn" data-id="${d.id}">🗑️ 削除</button>
          </div>`;
      }).join('');

      list.querySelectorAll('.delete-btn').forEach(btn => {
        btn.addEventListener('click', async () => {
          if(confirm('⚠️ このトーナメントを削除しますか？\n削除すると復元できません。')){
            await deleteDoc(doc(db, "tournaments", btn.dataset.id));
            loadStoreTournaments(userId);
          }
        });
      });
    }

    function renderClaimView(unclaimedDocs, userId) {
      if (unclaimedDocs.length === 0) {
          container.innerHTML = `<section class="dashboard-section"><h2>店舗の選択</h2><p>現在、担当者が未設定の店舗はありません。運営者に連絡してください。</p></section>`;
          return;
      }
      const storeListHtml = unclaimedDocs.map(doc => `<li><span>${doc.data().name}</span><button class="claim-btn" data-store-id="${doc.id}">この店舗を担当する</button></li>`).join('');
      container.innerHTML = `
        <section class="dashboard-section">
          <h2>店舗の選択</h2><p>あなたが担当する店舗を選択してください。</p>
          <ul id="unclaimed-stores-list">${storeListHtml}</ul>
        </section>
      `;
      container.querySelectorAll('.claim-btn').forEach(button => {
        button.addEventListener('click', async (e) => {
          if (confirm('この店舗の担当者として登録します。よろしいですか？')) {
            await updateDoc(doc(db, "stores", e.target.dataset.storeId), { ownerUid: userId });
            alert('店舗の担当者として登録されました！');
            window.location.reload();
          }
        });
      });
    }
  </script>
</body>
</html>