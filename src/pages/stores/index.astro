---
import '../../styles/global.css';
---

<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>店舗一覧 | OKIPOKA</title>
    <link rel="icon" href="/favicon.ico" type="image/x-icon" />
    <style>
        /* CSSは変更ありません */
        .filter-buttons { display: flex; justify-content: center; gap: 1rem; margin-bottom: 3rem; flex-wrap: wrap; }
        .filter-btn { padding: 0.5rem 1.2rem; border: 1px solid var(--color-border); background-color: var(--color-surface); color: var(--color-text); border-radius: 999px; cursor: pointer; font-weight: bold; transition: all 0.2s ease; }
        .filter-btn:hover { background-color: #e9ecef; border-color: #adb5bd; }
        .filter-btn.active { background-color: var(--color-primary); color: #fff; border-color: var(--color-primary); }
        .store-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 2rem; }
        .store-card { background: var(--color-surface); border-radius: 12px; text-decoration: none; transition: transform 0.2s, box-shadow 0.2s; display: flex; flex-direction: column; align-items: center; padding: 1.5rem; border: 1px solid var(--color-border); box-shadow: 0 2px 5px rgba(0,0,0,0.05); }
        .store-card:hover { transform: translateY(-5px); box-shadow: 0 10px 20px rgba(0,0,0,0.1); }
        .store-card img { width: 120px; height: 120px; border-radius: 50%; object-fit: contain; background-color: white; margin-bottom: 1rem; border: 1px solid var(--color-border); }
        .store-card h3 { font-size: 1.1rem; color: var(--color-text); text-align: center; }
        .hidden { display: none; }
    </style>
</head>
<body>

    <main class="container">
        <h1 style="text-align: center; margin-bottom: 3rem;">沖縄のポーカースポット一覧</h1>
        <div id="filter-buttons" class="filter-buttons">
            <p>読み込み中...</p>
        </div>
        <div id="store-grid" class="store-grid">
            <p>読み込み中...</p>
        </div>
    </main>


    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
        import { getFirestore, collection, getDocs } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-firestore.js";

        const firebaseConfig = {
            apiKey: "AIzaSyBhItIbOxR6rXdClsDidrcB1iB1714paAs",
            authDomain: "okipoka-68419.firebaseapp.com",
            projectId: "okipoka-68419",
            storageBucket: "okipoka-68419.appspot.com",
            messagingSenderId: "749122576664",
            appId: "1:749122576664:web:20b93253162b185d993e6d"
        };

        const app = initializeApp(firebaseConfig);
        const db = getFirestore(app);

        async function renderStores() {
            const snapshot = await getDocs(collection(db, "stores"));
            const stores = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }))
                .sort((a, b) => a.name.localeCompare(b.name, 'ja'));

            const areas = ["すべて", ...new Set(stores.map(store => store.area))];
            
            const filterContainer = document.getElementById('filter-buttons');
            const gridContainer = document.getElementById('store-grid');

            filterContainer.innerHTML = areas.map(area => 
                `<button class="filter-btn ${area === 'すべて' ? 'active' : ''}" data-area="${area}">${area}</button>`
            ).join('');
            
            gridContainer.innerHTML = stores.map(store => `
                <a href="/stores/${store.id}" class="store-card" data-store-area="${store.area}">
                    <img src="${store.logoUrl || '/images/sample.png'}" alt="${store.name} Logo" 
                         onerror="this.onerror=null; this.src='/images/sample.png';" />
                    <h3>${store.name}</h3>
                </a>
            `).join('');

            // フィルタ機能のイベントリスナーを設定
            const filterButtons = document.querySelectorAll('.filter-btn');
            const storeCards = document.querySelectorAll('.store-card');

            filterButtons.forEach(button => {
                button.addEventListener('click', () => {
                    filterButtons.forEach(btn => btn.classList.remove('active'));
                    button.classList.add('active');

                    const selectedArea = button.getAttribute('data-area');
                    storeCards.forEach(card => {
                        const cardArea = card.getAttribute('data-store-area');
                        if (selectedArea === 'すべて' || selectedArea === cardArea) {
                            card.classList.remove('hidden');
                        } else {
                            card.classList.add('hidden');
                        }
                    });
                });
            });
        }

        renderStores();
    </script>
</body>
</html>